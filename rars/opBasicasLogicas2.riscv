.data
result_str: .asciz "\n"

.text
# Leitura do número 'a'
li a7, 5
ecall
mv t0, a0  # Move o valor lido para t0

# Leitura do número 'b'
li a7, 5
ecall
mv t1, a0  # Move o valor lido para t1

# Leitura do número 'c'
li a7, 5
ecall
mv a2, a0  # Move o valor lido para a2

# Soma de 'a' e 'b'
add t2, t0, t1

# Imprimir o resultado da soma
li a7, 1
mv a0, t2  # Coloca o resultado no registrador de argumento
ecall

# Imprimir uma nova linha
li a7, 4
la a0, result_str
ecall

# Subtração de 'a' e 'b'
sub t3, t0, t1

# Imprimir o resultado da subtração
li a7, 1
mv a0, t3  # Coloca o resultado no registrador de argumento
ecall

# Imprimir uma nova linha
li a7, 4
la a0, result_str
ecall

# Operação lógica AND entre 'a' e 'b'
and t4, t0, t1

# Imprimir o resultado da operação AND
li a7, 1
mv a0, t4  # Coloca o resultado no registrador de argumento
ecall

# Imprimir uma nova linha
li a7, 4
la a0, result_str
ecall

# Operação lógica OR entre 'a' e 'b'
or t5, t0, t1

# Imprimir o resultado da operação OR
li a7, 1
mv a0, t5  # Coloca o resultado no registrador de argumento
ecall

# Imprimir uma nova linha
li a7, 4
la a0, result_str
ecall

# Operação lógica XOR entre 'a' e 'b'
xor t6, t0, t1

# Imprimir o resultado da operação XOR
li a7, 1
mv a0, t6  # Coloca o resultado no registrador de argumento
ecall

# Imprimir uma nova linha
li a7, 4
la a0, result_str
ecall


# Operação lógica AND entre 'c' e 31
andi a3, a2, 31

# Imprimir o resultado da operação AND para 'c'
li a7, 1
mv a0, a3  # Coloca o resultado no registrador de argumento
ecall

# Imprimir uma nova linha
li a7, 4
la a0, result_str
ecall

sll t0, t0, a3

li a7, 1
mv a0, t0  # Coloca o resultado no registrador de argumento
ecall

# Imprimir uma nova linha
li a7, 4
la a0, result_str
ecall

# Deslocamento de 'b' à direita por 'm' bits
srl t1, t1, a3

# Imprimir o resultado do deslocamento à direita
li a7, 1
mv a0, t1  # Coloca o resultado no registrador de argumento
ecall

# Finalize o programa
li a7, 10
ecall